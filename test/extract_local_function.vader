Include: support/test_helper.vader

Before:
  " This resets the cached state of the parser.
  " e.g, without this `ts_utils.get_node_at_cursor()` returns nil if there is more than one test.
  lua require'nvim-treesitter.parsers'.get_parser():parse()

Given javascript (local void function):
  function getParentModuleName() {
    const caller = stack.shift()

    let path2 = caller.split(' ').pop()
    path2 = path2.replace(/^\(/, '')

    return path
  }

Do:
  3j
  Vj
  :'<,'>VjsExtractLocalFunction\<CR>
  thing\<CR>

Expect javascript:
  function getParentModuleName() {
    const caller = stack.shift()

    function thing() {
      let path2 = caller.split(' ').pop()
      path2 = path2.replace(/^\(/, '')
    }

    thing()

    return path
  }

Given javascript (local void function without blank line):
  function getParentModuleName() {
    const caller = stack.shift()

    let path2 = caller.split(' ').pop()
    path2 = path2.replace(/^\(/, '')
    return path
  }

Do:
  3j
  Vj
  :'<,'>VjsExtractLocalFunction\<CR>
  thing\<CR>

Expect javascript:
  function getParentModuleName() {
    const caller = stack.shift()

    function thing() {
      let path2 = caller.split(' ').pop()
      path2 = path2.replace(/^\(/, '')
    }

    thing()
    return path
  }

Given javascript (local void function with extra indent):
  function getParentModuleName() {
    const caller = stack.shift()

    function stuff() {
      let path2 = caller.split(' ').pop()
      path2 = path2.replace(/^\(/, '')
      return path
    }
  }

Do:
  4j
  Vj
  :'<,'>VjsExtractLocalFunction\<CR>
  thing\<CR>

Expect javascript:
  function getParentModuleName() {
    const caller = stack.shift()

    function stuff() {
      function thing() {
        let path2 = caller.split(' ').pop()
        path2 = path2.replace(/^\(/, '')
      }

      thing()
      return path
    }
  }

Given javascript (async local void function):
  async function getParentModuleName() {
    const caller = stack.shift()

    let path2 = await caller.split(' ').pop()
    path2 = path2.replace(/^\(/, '')

    return path
  }

Do:
  3j
  Vj
  :'<,'>VjsExtractLocalFunction\<CR>
  thing\<CR>

Expect javascript:
  async function getParentModuleName() {
    const caller = stack.shift()

    async function thing() {
      let path2 = await caller.split(' ').pop()
      path2 = path2.replace(/^\(/, '')
    }

    await thing()

    return path
  }

Given javascript (local async function with return value):
  async function getParentModuleName() {
    const caller = stack.shift()

    let path = await caller.split(' ').pop()
    path = path.replace(/^\(/, '')

    return path
  }

Do:
  3j
  Vj
  :'<,'>VjsExtractLocalFunction\<CR>
  thing\<CR>

Expect javascript:
  async function getParentModuleName() {
    const caller = stack.shift()

    async function thing() {
      let path = await caller.split(' ').pop()
      path = path.replace(/^\(/, '')
      return path
    }

    const path = await thing()

    return path
  }

Given javascript (local function with multiple return values):
  async function getParentModuleName() {
    const caller = stack.shift()

    let path = caller.split(' ').pop()
    const foo = 2
    path = path.replace(/^\(/, '')

    return path + foo
  }

Do:
  3j
  Vjj
  :'<,'>VjsExtractLocalFunction\<CR>
  thing\<CR>

Expect javascript:
  async function getParentModuleName() {
    const caller = stack.shift()

    function thing() {
      let path = caller.split(' ').pop()
      const foo = 2
      path = path.replace(/^\(/, '')
      return {path, foo}
    }

    const {path, foo} = thing()

    return path + foo
  }
