Include: support/test_helper.vader

Before:
  " This resets the cached state of the parser.
  " e.g, without this `ts_utils.get_node_at_cursor()` returns nil if there is more than one test.
  :lua require'nvim-treesitter.parsers'.get_parser():parse()

Given javascript:
  function blah () {
    if (s()) {
      return 1
    }
  }

Do:
  j
  fs
  vf)
  :'<,'>VjsExtractVariable\<CR>
  thing\<CR>

Expect javascript:
  function blah () {
    const thing = s()

    if (thing) {
      return 1
    }
  }

Given javascript:
  const fs = require('fs')

  const phoenixApiSchema = fs.readFileSync(`${__dirname}/phoenix-api.graphqls`, {encoding: "utf8"})

Do:
  2j
  ff
  vg_
  :'<,'>VjsExtractVariable\<CR>
  thing\<CR>

Expect javascript:
  const fs = require('fs')

  const thing = fs.readFileSync(`${__dirname}/phoenix-api.graphqls`, {encoding: "utf8"})

  const phoenixApiSchema = thing

Given javascript:
  const fs = require('fs')

  fun(() => {
    f({
      stuff: 1,
      blah: 'two'
    })
  })

Do:
  3j
  $v/}\<CR>
  :'<,'>VjsExtractVariable\<CR>
  thing\<CR>

Expect javascript:
  const fs = require('fs')

  fun(() => {
    const thing = {
      stuff: 1,
      blah: 'two'
    }

    f(thing)
  })

Given javascript:
  const fs = require('fs')

  fun(() => {
    f({
      stuff: 1,
      "blah": {
        d: 5
      }
    })
  })

Do:
  6j
  va}
  :'<,'>VjsExtractVariable\<CR>
  thing\<CR>

Expect javascript:
  const fs = require('fs')

  fun(() => {
    const thing = {
      d: 5
    }

    f({
      stuff: 1,
      "blah": thing
    })
  })

Given javascript:
  const fs = require('fs')

  fun(() => {
    f({
      blah: {
        d: 5
      },
      stuff: 1
    })
  })

Do:
  6j
  va}
  :'<,'>VjsExtractVariable\<CR>
  \<CR>

Expect javascript:
  const fs = require('fs')

  fun(() => {
    const blah = {
      d: 5
    }

    f({
      blah,
      stuff: 1
    })
  })

Given javascript:
  const fs = require('fs')

  fun(() => {
    f({
      blah: {
        d: 5555
      },
      stuff: 1
    })
  })

Do:
  5j
  f5
  viw
  :'<,'>VjsExtractVariable\<CR>
  \<CR>

Expect javascript:
  const fs = require('fs')

  fun(() => {
    const d = 5555

    f({
      blah: {
        d
      },
      stuff: 1
    })
  })

Given javascript (function variable):
  const fs = require('fs')

  fun(() => {
    f({
      blah: {
        d: () => {
          console.log('hello')
        }
      },
      stuff: 1
    })
  })

Do:
  5j
  f(
  vjj
  :'<,'>VjsExtractVariable\<CR>
  \<CR>

Expect javascript:
  const fs = require('fs')

  fun(() => {
    const d = () => {
      console.log('hello')
    }

    f({
      blah: {
        d
      },
      stuff: 1
    })
  })
